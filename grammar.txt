program     -> declaration* EOF;
declaration -> varDecl | statement;
varDecl     -> "var" IDENTIFIER ( "=" expression )? ";";
statement   -> exprStmt | ifStmt | printStmt | whileStmt | block;
whileStmt   -> "while" "(" expression ")" statement;
ifStmt      -> "if" "(" expression ")" statement ( "else" statement )?; 
bloc        -> "{" declaration "}";
exprStmt    -> expression ";";
printStmt   -> "print" expression ";";
expression  -> literal | unary | binary | grouping;
literal     -> NUMBER | STRING | "true" | "false" | "nil";
grouping    -> "(" expression ")";
unary       -> ("-" | "!") expression;
binary      -> expression operator expression;
operator    -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "=" | "*" | "/";

binary operator rules

expression      -> assigment;
assigment       -> IDENTIFIER "=" assigment | logic_or;
logic_or        -> logic_and ( "or"  logic_and)*;
logic_and       -> equality ( "and"  equality )*;
equality        -> comprasion ( ("!=" | "==") comprasion )*;
comprasion      -> addition ( ( ">" | ">=" | "<" | "<=) addition )*;
addition        -> multiplication ( ("-" | "+" ) multiplication )*;
multiplication  -> unary( ("/" | "*" ) unary )*;
unary           -> ("!"  | "-" ) unary | primary;
primary         -> NUMBER | STRING | "false" | "true" | "nil" | "(" expression ")" | IDENTIFIER;